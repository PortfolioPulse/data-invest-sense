// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.23.4
// source: internal/infra/grpc/protofiles/input.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	InputService_CreateInput_FullMethodName = "/pb.InputService/CreateInput"
)

// InputServiceClient is the client API for InputService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type InputServiceClient interface {
	CreateInput(ctx context.Context, in *CreateInputRequest, opts ...grpc.CallOption) (*CreateInputResponse, error)
}

type inputServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewInputServiceClient(cc grpc.ClientConnInterface) InputServiceClient {
	return &inputServiceClient{cc}
}

func (c *inputServiceClient) CreateInput(ctx context.Context, in *CreateInputRequest, opts ...grpc.CallOption) (*CreateInputResponse, error) {
	out := new(CreateInputResponse)
	err := c.cc.Invoke(ctx, InputService_CreateInput_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// InputServiceServer is the server API for InputService service.
// All implementations must embed UnimplementedInputServiceServer
// for forward compatibility
type InputServiceServer interface {
	CreateInput(context.Context, *CreateInputRequest) (*CreateInputResponse, error)
	mustEmbedUnimplementedInputServiceServer()
}

// UnimplementedInputServiceServer must be embedded to have forward compatible implementations.
type UnimplementedInputServiceServer struct {
}

func (UnimplementedInputServiceServer) CreateInput(context.Context, *CreateInputRequest) (*CreateInputResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateInput not implemented")
}
func (UnimplementedInputServiceServer) mustEmbedUnimplementedInputServiceServer() {}

// UnsafeInputServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to InputServiceServer will
// result in compilation errors.
type UnsafeInputServiceServer interface {
	mustEmbedUnimplementedInputServiceServer()
}

func RegisterInputServiceServer(s grpc.ServiceRegistrar, srv InputServiceServer) {
	s.RegisterService(&InputService_ServiceDesc, srv)
}

func _InputService_CreateInput_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateInputRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InputServiceServer).CreateInput(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InputService_CreateInput_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InputServiceServer).CreateInput(ctx, req.(*CreateInputRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// InputService_ServiceDesc is the grpc.ServiceDesc for InputService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var InputService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.InputService",
	HandlerType: (*InputServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateInput",
			Handler:    _InputService_CreateInput_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "internal/infra/grpc/protofiles/input.proto",
}
