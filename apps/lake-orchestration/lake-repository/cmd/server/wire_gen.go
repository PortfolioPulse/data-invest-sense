// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"apps/lake-orchestration/lake-repository/internal/entity"
	"apps/lake-orchestration/lake-repository/internal/event"
	"apps/lake-orchestration/lake-repository/internal/infra/database"
	"apps/lake-orchestration/lake-repository/internal/infra/web/handlers"
	"apps/lake-orchestration/lake-repository/internal/usecase"
	"github.com/google/wire"
	"go.mongodb.org/mongo-driver/mongo"
	"libs/golang/events"
)

// Injectors from wire.go:

// [Use Case]
func NewCreateSchemaUseCase(client *mongo.Client, eventDispatcher events.EventDispatcherInterface, database2 string) *usecase.CreateSchemaUseCase {
	schemaRepository := database.NewSchemaRepository(client, database2)
	schemaCreated := event.NewSchemaCreated()
	createSchemaUseCase := usecase.NewCreateSchemaUseCase(schemaRepository, schemaCreated, eventDispatcher)
	return createSchemaUseCase
}

// [Web Handler]
func NewWebSchemaHandler(client *mongo.Client, eventDispatcher events.EventDispatcherInterface, database2 string) *handlers.WebSchemaHandler {
	schemaRepository := database.NewSchemaRepository(client, database2)
	schemaCreated := event.NewSchemaCreated()
	webSchemaHandler := handlers.NewWebSchemaHandler(eventDispatcher, schemaRepository, schemaCreated)
	return webSchemaHandler
}

// wire.go:

var setSchemaRepositoryDependency = wire.NewSet(database.NewSchemaRepository, wire.Bind(
	new(entity.SchemaInterface),
	new(*database.SchemaRepository),
),
)

var setEventDispatcherDependency = wire.NewSet(events.NewEventDispatcher, event.NewSchemaCreated, wire.Bind(new(events.EventInterface), new(*event.SchemaCreated)), wire.Bind(new(events.EventDispatcherInterface), new(*events.EventDispatcher)))

var setSchemaCreatedEvent = wire.NewSet(event.NewSchemaCreated, wire.Bind(new(events.EventInterface), new(*event.SchemaCreated)))
