// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	schemas4 "apps/lake-manager/internal/entity/schemas"
	"apps/lake-manager/internal/event/schemas"
	schemas2 "apps/lake-manager/internal/infra/database/schemas"
	schemas3 "apps/lake-manager/internal/infra/web/handlers/schemas"
	"apps/lake-manager/internal/usecase/schemas"
	"apps/lake-manager/pkg/events"
	"github.com/google/wire"
	"go.mongodb.org/mongo-driver/mongo"
)

// Injectors from wire.go:

func NewCreateSchemaInputUseCase(client *mongo.Client, eventDispatcher events.EventDispatcherInterface) *schemas.CreateSchemaInputUseCase {
	schemaInputRepository := schemas2.NewSchemaInputRepository(client)
	schemaInputCreated := event.NewSchemaInputCreated()
	createSchemaInputUseCase := schemas.NewCreateSchemaInputUseCase(schemaInputRepository, schemaInputCreated, eventDispatcher)
	return createSchemaInputUseCase
}

func NewWebSchemaInputHandler(client *mongo.Client, eventDispatcher events.EventDispatcherInterface) *schemas3.WebSchemaInputHandler {
	schemaInputRepository := schemas2.NewSchemaInputRepository(client)
	schemaInputCreated := event.NewSchemaInputCreated()
	webSchemaInputHandler := schemas3.NewWebSchemaInputHandler(eventDispatcher, schemaInputRepository, schemaInputCreated)
	return webSchemaInputHandler
}

// wire.go:

var setSchemaInputRepositoryDependency = wire.NewSet(schemas2.NewSchemaInputRepository, wire.Bind(
	new(schemas4.SchemaInputInterface),
	new(*schemas2.SchemaInputRepository),
),
)

var setSchemasEventDispatcherDependency = wire.NewSet(events.NewEventDispatcher, event.NewSchemaInputCreated, wire.Bind(new(events.EventInterface), new(*event.SchemaInputCreated)), wire.Bind(new(events.EventDispatcherInterface), new(*events.EventDispatcher)))

var setSchemaInputCreatedEvent = wire.NewSet(event.NewSchemaInputCreated, wire.Bind(new(events.EventInterface), new(*event.SchemaInputCreated)))
